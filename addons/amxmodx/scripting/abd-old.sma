/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta_util>
#include <fakemeta>
#include <fun>
#include <engine>

#define PLUGIN "Advanced Bullet Damage"
#define VERSION "1.0"
#define AUTHOR "Sn!ff3r"
#define MAX_HEALTH 100

// new g_type, g_enabled, g_recieved, bool:g_showrecieved, g_hudmsg1, g_hudmsg2

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	//register_event("Damage", "on_damage", "be", "2!0" )
	register_event("Health", "hchange", "b")
	//register_event("Battery", "hchange", "b")
	
	//g_type = register_cvar("amx_bulletdamage","1")
	//g_recieved = register_cvar("amx_bulletdamage_recieved","1")	
	
	//g_hudmsg1 = CreateHudSyncObj()	
	//g_hudmsg2 = CreateHudSyncObj()


	new mapnamecheck[3];
	get_mapname(mapnamecheck,3);
    new Entity = -1
	while ( ( Entity = find_ent_by_class( Entity, "player_weaponstrip" ) ) )
    {
        remove_entity( Entity )
    }	
	if ( !(equali(mapnamecheck[0], "c", 1) && equali(mapnamecheck[2], "a", 1)) ) {
		console_cmd(0, "rcbot config dont_shoot 0");

    
    while ( ( Entity = find_ent_by_class( Entity, "trigger_changelevel" ) ) )
    {
        remove_entity( Entity )
    }

	}
	else {
		console_cmd(0, "rcbot config dont_shoot 1");
	}
	return 0;
}

public client_disconnected()
{
	new numpl = get_playersnum(0);
	if (numpl <= 4) {
		console_cmd(0, "changelevel d1_trainstation_02");
	}
}

public on_damage(id)
{
		//static attacker; 
		//attacker = get_user_attacker(id)

		//static damage; 
		//damage = read_data(2)

		//set_hudmessage(255, 0, 0, 0.45, 0.50, 2, 0.1, 4.0, 0.1, 0.1, -1)
		//ShowSyncHudMsg(id, g_hudmsg2, "%i^n", damage)	

		//set_hudmessage(0, 255, 0, 0.55, 0.50, 2, 0.1, 4.0, 0.1, 0.1, -1)
		//ShowSyncHudMsg(attacker, g_hudmsg2, "%i^n", damage)	

		
}
public hchange(id) {
		//new percent = 100 * get_user_health(id) / MAX_HEALTH
		new mapnamecheck[3];
		get_mapname(mapnamecheck,3);
		//if ( ( (equali(mapnamecheck[0], "c", 1) && equali(mapnamecheck[2], "a", 1)) ) && (is_user_bot( id ))) {
		if ( is_user_bot( id ) ) {
			set_user_maxspeed(id, 0.01);
			set_pev(id, pev_solid, SOLID_NOT);
			set_user_godmode( id, 1 );
			new oa[3];
			oa[0] = -9999999999999999999999999999;
			oa[1] = -9999999999999999999999999999;
			oa[2] = -9999999999999999999999999999;
			set_user_origin( id, oa);
		}
		else {
			set_user_maxspeed(id, (get_user_health( id )*3.2));
		}
		message_begin(MSG_ONE, get_user_msgid("ScreenFade"), {0,0,0}, id)
        write_short(9999999999999999999999999)
        write_short(9999999999999999999999999)
        write_short(0x0004)
		if (is_user_alive(id) == true) {
			if (floatround(get_user_health( id )*5.1) > 255) {
				write_byte(255)
			}
			else {
				write_byte(floatround(get_user_health( id )*5.1))
			}
		}
		else {
        	write_byte(0)
		}
        write_byte(0)
        write_byte(0)
		if (is_user_alive(id) == true) {
			write_byte(floatround(255-(get_user_health( id )*2.55)))
		}
		else {
        	write_byte(255)
		}
        message_end()
		if (task_exists(id) == false) {
			set_task( 1.0, "CTask__RegenerationHealth", id, _, _, .flags = "b" );
		}
}

public CTask__RegenerationHealth( pPlayer )
{
    if (is_user_alive( pPlayer )) {

		static Float:fVelocity[ 3 ];
        pev( pPlayer , pev_velocity , fVelocity );
		static pspeed;
        pspeed = floatround(vector_length( fVelocity ));
		pspeed = pspeed + 1;

		if (get_user_armor( pPlayer ) < 500) {
			set_user_armor(pPlayer, get_user_armor( pPlayer ) + 1); 
		}
			static float:chance;
			static float:recip;
			static float:spfr;
			spfr = floatdiv( pspeed, get_user_maxspeed(pPlayer) );
			if (spfr > 1.0) {
				spfr = 1.0;
			}
			chance = floatdiv( (100.0+(get_user_health( pPlayer )*10)), ((1.25 - spfr)*(get_user_armor( pPlayer )+100)));
			recip = floatdiv( 1.0, chance );
			if (recip < 1.0) {
				recip = 1.0;
			}
			if (get_user_health( pPlayer ) < 100) {
				if (random_float(0.0,chance) <= 1.0) {
					//console_print(pPlayer, "%f", recip);
					set_user_health(pPlayer, get_user_health( pPlayer ) + random_num(0, floatround(recip)*2));
					if (get_user_health( pPlayer ) > 100) {
						set_user_health(pPlayer, 100);
					} 
				}
			}
	}
} 
